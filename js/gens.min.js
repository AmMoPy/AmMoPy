function popuMe(text){const txt=document.getElementById("about-me-text");txt.innerHTML=DOMPurify.sanitize(`<p>${text}</p>`)}class popuSwiper{constructor(){this.templates={default:(item,options={})=>`\n        <div class="slide-content">\n          <a href="${item.link}" target="_blank">\n            <div class="slide-thumb">\n              <img src="${item.thumb}" alt="${item.title}" loading="lazy">\n            </div>\n            <div class="${options.descriptionClass||"slide-description"}">\n              <p>${item.description}</p>\n            </div>\n          </a>\n        </div>\n      `};this.swiperInstances={}}addTemplate(name,template){this.templates[name]=template}populate(wrapperSelector,data,options={}){const{templateName:templateName="default",autoInit:autoInit=true,swiperConfig:swiperConfig={},templateOptions:templateOptions={}}=options;const wrapper=document.querySelector(wrapperSelector);if(!wrapper){console.error(`Wrapper not found for selector: ${wrapperSelector}`);return}const template=this.templates[templateName];if(!template){console.error(`Template "${templateName}" not found.`);return}wrapper.innerHTML="";const fragment=document.createDocumentFragment();data.forEach((item=>{const slide=document.createElement("div");slide.classList.add("swiper-slide");slide.innerHTML=DOMPurify.sanitize(template(item,templateOptions));fragment.appendChild(slide)}));wrapper.appendChild(fragment);if(autoInit){this.initSwiper(wrapperSelector.split(" .swiper-wrapper")[0],swiperConfig)}}initSwiper(containerSelector,swiperConfig={}){const container=document.querySelector(containerSelector);if(!container){console.error(`Container not found for selector: ${containerSelector}`);return}if(!this.swiperInstances[containerSelector]){this.swiperInstances[containerSelector]=new Swiper(container,{loop:true,grabCursor:true,autoplay:{delay:5e5,pauseOnHover:true},...swiperConfig})}}updateSlides(wrapperSelector,data,options={}){const{templateName:templateName="default"}=options;const wrapper=document.querySelector(wrapperSelector);if(!wrapper){console.error(`Wrapper not found for selector: ${wrapperSelector}`);return}const template=this.templates[templateName];if(!template){console.error(`Template "${templateName}" not found.`);return}wrapper.innerHTML="";data.forEach((item=>{const slide=document.createElement("div");slide.classList.add("swiper-slide");slide.innerHTML=DOMPurify.sanitize(template(item));wrapper.appendChild(slide)}));const containerSelector=wrapperSelector.split(" .swiper-wrapper")[0];const swiperInstance=this.swiperInstances[containerSelector];if(swiperInstance){swiperInstance.update()}}getSwiperInstance(containerSelector){return this.swiperInstances[containerSelector]}}class utility{constructor(){}moveHandler({dist:dist=2,throttleTime:throttleTime=16}){return this.throttle(((x,{isDragging:isDragging,startX:startX,scrollFn:scrollFn,container:container})=>{if(!isDragging)return;const walk=(x-startX)*dist;requestAnimationFrame((()=>scrollFn(walk,container)))}),throttleTime)}scroll(walk,container,useTransform,currentScrollLeft){if(useTransform){const x=currentScrollLeft+walk;container.style.transform=`translateX(${-x}px)`;return x}else{container.scrollLeft=currentScrollLeft-walk;return container.scrollLeft}}debounce(func,delay){let timeout;return(...args)=>{clearTimeout(timeout);timeout=setTimeout((()=>func.apply(this,args)),delay)}}throttle(func,limit){let inThrottle;return(...args)=>{if(!inThrottle){func(...args);inThrottle=true;setTimeout((()=>inThrottle=false),limit)}}}}class popuTimeline extends utility{constructor(containerId,workExperience){super();this.containerId=containerId;this.workExperience=workExperience;this.isDragging=false;this.startX=0;this.scrollLeft=0;this.useTransform="ontouchstart"in window;this.activeItem=null;this.init()}init(){this.timeline=document.getElementById(this.containerId);this.timelineWrapper=this.timeline.querySelector(".timeline-wrapper");this.modal=document.getElementById("work-modal");this.modalHeader=document.getElementById("modal-header");this.modalContent=document.getElementById("modal-body");this.closeModalButton=this.modal.querySelector(".close-modal");this.populateTimeline();this.setupEventListeners();this.adjustScrollableWidth()}populateTimeline(){const fragment=document.createDocumentFragment();this.workExperience.forEach((job=>{const timelineItem=document.createElement("div");timelineItem.classList.add("timeline-item");const imageName=job.logo.match(/\/([^\/]+)\.\w+$/)?.[1]||"default";const itemLogo=`${imageName.toLowerCase().replace(/\s+/g,"-")}`;timelineItem.innerHTML=DOMPurify.sanitize(`\n        <h3><img src="${job.logo}" alt="${job.company}" class="timeline-logo ${itemLogo}">${job.title}</h3>\n        <p>${job.from} - ${job.to}</p>\n        <div class="summary-overlay">${job.summary}</div>\n      `);fragment.appendChild(timelineItem)}));this.timelineWrapper.appendChild(fragment)}showModal(job){this.modalContent.scrollTop=0;this.modalHeader.innerHTML="";this.modalContent.innerHTML="";let headerHTML=`<h3>${job.title}</h3>`;if(job.company&&job.company.trim()!==""){headerHTML+=`<p><strong>Company:</strong> ${job.company}</p>`}headerHTML+=`\n      <p><strong>Duration:</strong> ${job.from} - ${job.to}</p>\n    `;this.modalHeader.innerHTML=DOMPurify.sanitize(headerHTML);this.modalContent.innerHTML=DOMPurify.sanitize(`\n      <div class="modal-description">${job.description}</div>\n    `);this.modal.style.display="block"}hideModal(){this.modal.style.display="none"}adjustScrollableWidth(){if(!this.timelineItems){this.timelineItems=Array.from(this.timelineWrapper.querySelectorAll(".timeline-item"))}const itemWidth=280;const gap=20;const totalWidth=(itemWidth+gap)*this.workExperience.length-gap;this.timelineWrapper.style.width=`${totalWidth}px`}setupEventListeners(){window.addEventListener("resize",this.debounce((()=>{requestAnimationFrame((()=>this.adjustScrollableWidth()))}),100),{passive:true});document.addEventListener("click",(e=>{const timelineItem=e.target.closest(".timeline-item");const isClickInsideModal=this.modal.contains(e.target);const isCloseButton=e.target===this.closeModalButton;if(timelineItem){e.preventDefault();if(this.activeItem){this.activeItem.classList.remove("active")}if(this.activeItem!==timelineItem){timelineItem.classList.add("active");const job=this.workExperience[Array.from(this.timelineWrapper.children).indexOf(timelineItem)];this.showModal(job);this.activeItem=timelineItem}else{this.activeItem=null;this.hideModal()}}else if(isCloseButton||!isClickInsideModal&&this.modal.style.display==="block"){e.preventDefault();if(this.activeItem){this.activeItem.classList.remove("active");this.activeItem=null}this.hideModal()}}),{passive:false});this.modalContent.addEventListener("wheel",(e=>{const{scrollTop:scrollTop,scrollHeight:scrollHeight,clientHeight:clientHeight}=this.modalContent;const atTop=scrollTop===0&&e.deltaY<0;const atBottom=Math.abs(scrollHeight-clientHeight-scrollTop)<1&&e.deltaY>0;if(atTop||atBottom){e.preventDefault()}}),{passive:false});const handleMove=this.moveHandler({});this.timeline.addEventListener("mousedown",(e=>{if(e.target.classList.contains("timeline-item")){e.preventDefault();return}this.isDragging=true;this.startX=e.pageX-this.timeline.offsetLeft;this.scrollLeft=this.timeline.scrollLeft;e.preventDefault()}),{passive:false});this.timeline.addEventListener("mousemove",(e=>{if(!this.isDragging)return;e.preventDefault();handleMove(e.pageX-this.timeline.offsetLeft,{isDragging:this.isDragging,startX:this.startX,scrollFn:(walk,container)=>{this.scrollLeft=this.scroll(walk,container,this.useTransform,this.scrollLeft)},container:this.timeline})}),{passive:false});this.timeline.addEventListener("mouseup",(e=>{if(this.isDragging){e.preventDefault();this.isDragging=false;this.scrollLeft=this.timeline.scrollLeft}}),{passive:false});this.timeline.addEventListener("mouseleave",(e=>{if(this.isDragging){e.preventDefault();this.isDragging=false;this.scrollLeft=this.timeline.scrollLeft}}),{passive:false});this.timeline.addEventListener("touchstart",(e=>{if(e.target.classList.contains("timeline-item")){return}this.isDragging=true;this.startX=e.touches[0].pageX-this.timeline.offsetLeft;this.scrollLeft=this.timeline.scrollLeft;e.preventDefault()}),{passive:false});this.timeline.addEventListener("touchmove",(e=>{if(!this.isDragging)return;e.preventDefault();handleMove(e.touches[0].pageX-this.timeline.offsetLeft,{isDragging:this.isDragging,startX:this.startX,scrollFn:(walk,container)=>{this.scrollLeft=this.scroll(walk,container,this.useTransform,this.scrollLeft)},container:this.timeline})}),{passive:false});this.timeline.addEventListener("touchend",(e=>{if(this.isDragging){e.preventDefault();this.isDragging=false;this.scrollLeft=this.timeline.scrollLeft}}),{passive:false})}}class popuEdu extends utility{constructor(items){super();this.items=items;this.container=document.querySelector(".cards-wrapper");this.cardsContainer=document.querySelector(".cards-container");this.scrollPos=0;this.isDragging=false;this.startX=0;this.scrollLeft=0;this.isScrolling=true;this.singleSetWidth=0;this.duplicatesNeeded=0;this.dragSensitivity=1.5;this.scrollSpeed=500;this.touchStartX=0;this.touchStartTime=0;this.dragThreshold=10;this.tapTimeThreshold=300;this.init()}init(){this.cardsContainer.innerHTML="";this.containerWidth=this.container.offsetWidth;this.singleSetWidth=this.calculateTotalWidth(this.items);this.duplicatesNeeded=Math.ceil(this.containerWidth*3/this.singleSetWidth)+1;this.populateCards();this.setupEventListeners();this.setupAnimation();this.setupIntersectionObserver()}setupIntersectionObserver(){const options={root:this.container,rootMargin:"100px",threshold:.1};const observer=new IntersectionObserver((entries=>{entries.forEach((entry=>{if(entry.isIntersecting){const img=entry.target.querySelector("img");if(img&&img.dataset.src){img.src=img.dataset.src;img.removeAttribute("data-src")}}}))}),options);document.querySelectorAll(".card").forEach((card=>{observer.observe(card)}))}populateCards(){const fragment=document.createDocumentFragment();this.createCardSet(this.items,fragment);this.cardsContainer.appendChild(fragment)}createCardSet(itemSet,fragment){itemSet.forEach((item=>{const card=document.createElement("div");const imageName=item.logo.match(/\/([^\/]+)\.\w+$/)?.[1]||"default";const itemLogo=`${imageName.toLowerCase().replace(/\s+/g,"-")}`;card.classList.add("card");card.innerHTML=DOMPurify.sanitize(`\n        <img src="${item.logo}" alt="${item.institution}" class="edu-logo ${itemLogo}" loading="lazy">\n        <h3>${item.degree}</h3>\n        <p>${item.year}</p>\n        <div class="description-overlay">\n          <p>${item.description}</p>\n        </div>\n      `);fragment.appendChild(card)}))}calculateTotalWidth(itemSet){const sampleCard=document.querySelector(".card");let cardWidth=150;let cardMargin=20;if(sampleCard){const cardStyle=window.getComputedStyle(sampleCard);cardWidth=sampleCard.offsetWidth;cardMargin=parseInt(cardStyle.marginRight||0)+parseInt(cardStyle.marginLeft||0);const containerStyle=window.getComputedStyle(this.cardsContainer);const gap=parseInt(containerStyle.gap||0);cardMargin+=gap}return itemSet.length*(cardWidth+cardMargin)}setupAnimation(){this.removeAnimation();const styleId="card-scroll-animation";let styleEl=document.getElementById(styleId);if(!styleEl){styleEl=document.createElement("style");styleEl.id=styleId;document.head.appendChild(styleEl)}const cards=Array.from(this.cardsContainer.children);cards.forEach((card=>{const clone=card.cloneNode(true);this.cardsContainer.appendChild(clone)}));styleEl.textContent=`\n      @keyframes scrollCards {\n        0% { transform: translateX(0%); }\n        100% { transform: translateX(-50%); } /* Move by exactly half width */\n      }\n    `;this.cardsContainer.style.animation=`scrollCards ${this.scrollSpeed}s linear infinite`;this.updateScrollingState()}removeAnimation(){this.cardsContainer.style.animation="none";this.cardsContainer.style.transform="translate3d(0, 0, 0)"}setupEventListeners(){this.setupClickEvents();this.setupMouseEvents();this.setupTouchEvents();this.setupInactivityTimer();this.setupResizeHandler()}setupClickEvents(){this.cardsContainer.addEventListener("click",(e=>{const card=e.target.closest(".card");if(!card||this.isDragging)return;this.toggle_active(card)}))}setupMouseEvents(){this.cardsContainer.addEventListener("mousedown",(e=>{this.captureScrollPosition();this.startDrag(e.pageX)}),{passive:true});document.addEventListener("mousemove",(e=>{if(!this.isDragging)return;e.preventDefault();this.handleDrag(e.pageX)}),{passive:false});document.addEventListener("mouseup",(()=>{this.endDrag()}),{passive:true})}setupTouchEvents(){this.cardsContainer.addEventListener("touchstart",(e=>{this.captureScrollPosition();this.touchStartX=e.touches[0].pageX;this.touchStartTime=Date.now();this.startDrag(e.touches[0].pageX);e.preventDefault()}),{passive:false});document.addEventListener("touchmove",(e=>{if(!this.isDragging)return;this.handleDrag(e.touches[0].pageX);e.preventDefault()}),{passive:false});document.addEventListener("touchend",(e=>{if(!this.isDragging)return;const touchEndTime=Date.now();const touchDuration=touchEndTime-this.touchStartTime;const touchEndX=e.changedTouches?e.changedTouches[0].pageX:null;const touchDistance=touchEndX?Math.abs(touchEndX-this.touchStartX):Infinity;this.endDrag();if(touchDistance<this.dragThreshold&&touchDuration<this.tapTimeThreshold){const card=e.target.closest(".card");if(card){this.toggle_active(card)}}e.preventDefault()}),{passive:false})}setupInactivityTimer(){this.resetInactivityTimer();["mousedown","touchstart"].forEach((eventType=>{this.cardsContainer.addEventListener(eventType,(()=>this.resetInactivityTimer()),{passive:eventType==="mousedown"})}))}setupResizeHandler(){window.addEventListener("resize",this.throttle((()=>{const newDuplicatesNeeded=Math.ceil(this.containerWidth*3/this.calculateTotalWidth(this.items))+1;if(Math.abs(newDuplicatesNeeded-this.duplicatesNeeded)>1){this.init()}}),250),{passive:true})}captureScrollPosition(){const computedStyle=window.getComputedStyle(this.cardsContainer);const matrix=new DOMMatrix(computedStyle.transform);const containerWidth=this.cardsContainer.offsetWidth;this.scrollPercent=-matrix.m41/containerWidth*100}toggle_active(card){this.captureScrollPosition();if(card.classList.contains("active")){card.classList.remove("active");if(!document.querySelector(".card.active")){this.resumeScrollingWithAnimation()}}else{document.querySelectorAll(".card").forEach((c=>c.classList.remove("active")));card.classList.add("active");this.pauseScrolling();this.cardsContainer.style.animation="none";this.cardsContainer.style.transform=`translateX(-${this.scrollPercent}%)`}}resumeScrollingWithAnimation(){this.resumeScrolling();const styleId="dynamic-scroll-animation";let styleEl=document.getElementById(styleId);if(!styleEl){styleEl=document.createElement("style");styleEl.id=styleId;document.head.appendChild(styleEl)}styleEl.textContent=`\n      @keyframes dynamicScrollCards {\n        from { transform: translateX(-${this.scrollPercent}%); }\n        to { transform: translateX(-${this.scrollPercent+50}%); }\n      }\n    `;this.cardsContainer.style.animation=`dynamicScrollCards ${this.scrollSpeed}s linear infinite`}startDrag(pageX){this.isDragging=true;this.pauseScrolling();this.startX=pageX-this.cardsContainer.offsetLeft;this.scrollLeft=this.scrollPercent;this.cardsContainer.style.cursor="grabbing";this.cardsContainer.style.animation="none";this.cardsContainer.style.transform=`translateX(-${this.scrollPercent}%)`}handleDrag(pageX){if(!this.isDragging)return;const x=pageX-this.cardsContainer.offsetLeft;const containerWidth=this.cardsContainer.offsetWidth;const walkPixels=(x-this.startX)*this.dragSensitivity;const walkPercent=walkPixels/containerWidth*100;let newScrollPercent=this.scrollLeft-walkPercent;if(newScrollPercent<0){newScrollPercent=50+newScrollPercent%50}newScrollPercent=newScrollPercent%50;this.scrollPercent=newScrollPercent;window.requestAnimationFrame((()=>{this.cardsContainer.style.transform=`translateX(-${this.scrollPercent}%)`}))}endDrag(){if(!this.isDragging)return;this.isDragging=false;this.cardsContainer.style.cursor="grab";if(document.querySelector(".card.active")){this.pauseScrolling();this.cardsContainer.style.animation="none";this.cardsContainer.style.transform=`translateX(-${this.scrollPercent}%)`;return}this.resumeScrollingWithAnimation()}resetInactivityTimer(){clearTimeout(this.inactivityTimer);this.inactivityTimer=setTimeout((()=>{if(!document.querySelector(".card.active")){this.resumeScrolling()}}),5e3)}pauseScrolling(){this.isScrolling=false;this.updateScrollingState()}resumeScrolling(){this.isScrolling=true;this.updateScrollingState()}updateScrollingState(){if(this.isScrolling&&!this.isDragging){this.cardsContainer.style.animationPlayState="running"}else{this.cardsContainer.style.animationPlayState="paused"}}}class popuServ extends utility{constructor(servicesData){super();this.servicesData=servicesData;this.servicesContainer=document.querySelector(".services-container");this.paginationDotsContainer=document.querySelector(".pagination-dots");this.activeCard=null;this._enhanceDataStructure();this.isDragging=false;this.startX=0;this.scrollLeft=0;this.useTransform="ontouchstart"in window;this.dragDistance=0;this.currentCardIndex=0;this.dragThreshold=50;this.BUFFER_SIZE=2;this.ITEM_HEIGHT=140;this.virtualScroll={totalHeight:0,startIndex:0,endIndex:0,visibleItems:[],itemPositions:[],scrollTop:0,measurementComplete:false}}_enhanceDataStructure(){Object.values(this.servicesData).forEach((service=>{if(service.subcategories){service.subcategories.forEach((sub=>{sub.page=1;sub.totalPages=1;sub.originalServices=[...sub.services];sub.services=[...sub.originalServices];sub.virtualItems=[];const initialItemHeight=this.ITEM_HEIGHT;for(let i=0;i<200;i++){const originalIndex=i%sub.originalServices.length;sub.virtualItems.push({index:i,content:sub.originalServices[originalIndex],height:initialItemHeight,position:i*initialItemHeight,element:null})}sub.totalVirtualHeight=sub.virtualItems.length*initialItemHeight;sub.heightsMeasured=false;sub.initialItemHeightSet=false}))}}))}populateServices(){this._chunkedLoadServices()}_chunkedLoadServices(){const serviceKeys=Object.keys(this.servicesData);let index=0;const loadNextChunk=()=>{if(index>=serviceKeys.length){this._initializePagination();this._initializeDragAndScroll();return}const serviceKey=serviceKeys[index];const service=this.servicesData[serviceKey];this._createServiceCard(serviceKey,service,index);index++;requestAnimationFrame(loadNextChunk)};loadNextChunk()}_createServiceCard(serviceKey,service,index){const serviceCard=document.createElement("div");serviceCard.classList.add("service-card");serviceCard.setAttribute("data-type",serviceKey.slice(-1));serviceCard.setAttribute("data-index",index);const header=DOMPurify.sanitize(`\n      <div class="service-header">\n        <h3>${service.name}</h3>\n        <p class="service-description">${service.description}</p>\n      </div>\n    `);let content="";if(service.subcategories){content=DOMPurify.sanitize(`\n        <div class="service-content">\n          <div class="subcategories-container">\n            ${service.subcategories.map(((sub,i)=>`\n              <div class="subcategory ${i===0?"active":""}" data-description="${sub.description}">\n                <h4>${sub.title}</h4>\n              </div>\n            `)).join("")}\n          </div>\n          <div class="services-display">\n            <div class="virtual-scroll-container">\n              <div class="virtual-scroll-content"></div>\n            </div>\n          </div>\n          <div class="success-stories-container">\n            <h4 class="stories-header">Success Stories</h4>\n            <div class="stories-scroll">\n              ${service.successStories.map((story=>`\n                <div class="story">${story}</div>\n              `)).join("")}\n            </div>\n          </div>\n        </div>\n      `)}else if(service.videos){content=DOMPurify.sanitize(`\n        <div class="video-grid">\n          ${service.videos.map((video=>`\n            <div class="video-item">\n              <p>${video.title}</p>\n              <video controls muted playsinline>\n                <source src="${video.src}" type="video/mp4">\n              </video>\n            </div>\n          `)).join("")}\n        </div>\n      `)}else if(service.paragraphs){content=DOMPurify.sanitize(`\n        <div class="paragraphs">\n          ${service.paragraphs.map((para=>`\n            <div class="paragraph">\n              <h4>${para.title}</h4>\n              <p>${para.content}</p>\n            </div>\n          `)).join("")}\n        </div>\n      `)}serviceCard.innerHTML=`${header}<div class="service-content">${content}</div>`;this.servicesContainer.appendChild(serviceCard);if(service.subcategories){const subcategories=serviceCard.querySelectorAll(".subcategory");const servicesDisplay=serviceCard.querySelector(".services-display");subcategories.forEach((subcategory=>{subcategory.addEventListener("click",(()=>{const previousScrollTop=servicesDisplay.scrollTop;subcategories.forEach((sub=>sub.classList.remove("active")));subcategory.classList.add("active");const subcategoryTitle=subcategory.querySelector("h4").textContent;const subcategoryData=service.subcategories.find((sub=>sub.title===subcategoryTitle));servicesDisplay.scrollTop=0;setTimeout((()=>{this._initializeVirtualScroll(serviceCard,subcategoryData);servicesDisplay.getBoundingClientRect()}),50)}))}));setTimeout((()=>{this._initializeVirtualScroll(serviceCard,service.subcategories[0])}),100)}if(service.videos){setTimeout((()=>{serviceCard.querySelectorAll("video").forEach((video=>{video.addEventListener("play",(()=>{const videoItem=video.closest(".video-item");if(videoItem)videoItem.querySelector("p").style.opacity="0"}));video.addEventListener("pause",(()=>{const videoItem=video.closest(".video-item");if(videoItem)videoItem.querySelector("p").style.opacity="1"}));video.addEventListener("contextmenu",(e=>{if(document.pictureInPictureEnabled){video.requestPictureInPicture().catch((error=>{}))}}))}))}),0)}}_initializeVirtualScroll(serviceCard,subcategoryData){const servicesDisplay=serviceCard.querySelector(".services-display");const virtualScrollContainer=servicesDisplay.querySelector(".virtual-scroll-container");const virtualScrollContent=servicesDisplay.querySelector(".virtual-scroll-content");virtualScrollContainer.style.position="relative";virtualScrollContainer.style.width="100%";virtualScrollContainer.style.height="100%";virtualScrollContainer.style.overflow="visible";if(!servicesDisplay.originalWidth){servicesDisplay.originalWidth=servicesDisplay.offsetWidth}if(serviceCard.virtualScrollContext){const prevContext=serviceCard.virtualScrollContext;if(prevContext.container&&prevContext.container._scrollHandler){prevContext.container.removeEventListener("scroll",prevContext.container._scrollHandler)}}servicesDisplay.style.width=servicesDisplay.originalWidth?`${servicesDisplay.originalWidth}px`:"auto";servicesDisplay.style.minWidth="250px";servicesDisplay.style.overflowY="scroll";servicesDisplay.style.position="relative";servicesDisplay.scrollTop=0;virtualScrollContent.innerHTML="";virtualScrollContent.style.position="absolute";virtualScrollContent.style.width="100%";virtualScrollContent.style.top="0";virtualScrollContent.style.left="0";if(!subcategoryData.initialItemHeightSet){for(let i=0;i<subcategoryData.virtualItems.length;i++){subcategoryData.virtualItems[i].height=this.ITEM_HEIGHT}subcategoryData.initialItemHeightSet=true}let totalHeight=0;for(let i=0;i<subcategoryData.virtualItems.length;i++){subcategoryData.virtualItems[i].position=totalHeight;totalHeight+=subcategoryData.virtualItems[i].height}const virtualScrollContext={container:servicesDisplay,content:virtualScrollContent,items:subcategoryData.virtualItems,totalHeight:totalHeight,visibleStartIndex:0,visibleEndIndex:0,activeItemIndex:null,scrollTop:0,lastScrollTop:0,scrollDirection:"down",isScrolling:false,scrollTimeoutId:null,subcategoryData:subcategoryData};serviceCard.virtualScrollContext=virtualScrollContext;virtualScrollContent.style.height=`${totalHeight}px`;const containerHeight=servicesDisplay.clientHeight;const itemsPerView=Math.ceil(containerHeight/this.ITEM_HEIGHT);const endIndex=Math.min(itemsPerView+this.BUFFER_SIZE,subcategoryData.virtualItems.length-1);virtualScrollContext.visibleStartIndex=0;virtualScrollContext.visibleEndIndex=endIndex;this._renderVisibleItems(virtualScrollContext);if(servicesDisplay._scrollHandler){servicesDisplay.removeEventListener("scroll",servicesDisplay._scrollHandler)}const scrollHandler=this.throttle((()=>{this._handleVirtualScroll(virtualScrollContext)}),16);servicesDisplay._scrollHandler=scrollHandler;servicesDisplay.addEventListener("scroll",scrollHandler);servicesDisplay.addEventListener("wheel",(e=>{const atTop=servicesDisplay.scrollTop===0;const atBottom=servicesDisplay.scrollTop+servicesDisplay.clientHeight>=virtualScrollContent.offsetHeight;if(e.deltaY<0&&!atTop||e.deltaY>0&&!atBottom){e.stopPropagation()}}));this._handleVirtualScroll(virtualScrollContext);setTimeout((()=>{this._measureItemHeights(virtualScrollContext)}),100)}_handleVirtualScroll(context){const scrollTop=context.container.scrollTop;context.scrollDirection=scrollTop>context.lastScrollTop?"down":"up";context.lastScrollTop=scrollTop;this._updateVisibleItemRange(context);this._renderVisibleItems(context);this._updateActiveItem(context);if(context.scrollTimeoutId){clearTimeout(context.scrollTimeoutId)}context.isScrolling=true;context.scrollTimeoutId=setTimeout((()=>{context.isScrolling=false}),150)}_updateVisibleItemRange(context){const containerHeight=context.container.clientHeight;const scrollTop=context.container.scrollTop;const bufferSize=this.BUFFER_SIZE*this.ITEM_HEIGHT;const visibleTop=Math.max(0,scrollTop-bufferSize);const visibleBottom=scrollTop+containerHeight+bufferSize;let startIndex=context.items.length-1;let endIndex=0;for(let i=0;i<context.items.length;i++){const item=context.items[i];const itemTop=item.position;const itemBottom=item.position+item.height;if(itemTop<=visibleBottom&&itemBottom>=visibleTop){startIndex=Math.min(startIndex,i);endIndex=Math.max(endIndex,i)}}if(startIndex>endIndex){const estimatedStartIndex=Math.floor(visibleTop/this.ITEM_HEIGHT);startIndex=Math.max(0,Math.min(context.items.length-1,estimatedStartIndex));endIndex=Math.min(context.items.length-1,startIndex+Math.ceil(containerHeight/this.ITEM_HEIGHT)+this.BUFFER_SIZE)}startIndex=Math.max(0,startIndex-this.BUFFER_SIZE);endIndex=Math.min(context.items.length-1,endIndex+this.BUFFER_SIZE);context.visibleStartIndex=startIndex;context.visibleEndIndex=endIndex}_renderVisibleItems(context){const renderedItems=new Set;context.content.querySelectorAll(".service-item").forEach((element=>{renderedItems.add(parseInt(element.dataset.index,10))}));const visibleIndices=new Set;for(let i=context.visibleStartIndex;i<=context.visibleEndIndex;i++){visibleIndices.add(i)}renderedItems.forEach((index=>{if(!visibleIndices.has(index)){const element=context.content.querySelector(`.service-item[data-index="${index}"]`);if(element){element.remove();if(context.items[index]){context.items[index].element=null}}}}));const fragment=document.createDocumentFragment();for(let i=context.visibleStartIndex;i<=context.visibleEndIndex;i++){if(!renderedItems.has(i)&&i<context.items.length){const item=context.items[i];if(!item)continue;const element=document.createElement("div");element.className="service-item";element.textContent=item.content;element.dataset.index=i;element.style.position="absolute";element.style.top=`${item.position}px`;element.style.width="calc(100% - 40px)";fragment.appendChild(element);item.element=element}}context.content.appendChild(fragment);if(!context.subcategoryData.heightsMeasured){setTimeout((()=>{this._measureItemHeights(context)}),100)}}_measureItemHeights(context){const serviceItems=context.content.querySelectorAll(".service-item");if(serviceItems.length===0)return;let heightChanged=false;let totalHeightChange=0;serviceItems.forEach((element=>{const index=parseInt(element.dataset.index,10);const item=context.items[index];if(!item)return;const actualHeight=element.offsetHeight;if(Math.abs(actualHeight-item.height)>2&&actualHeight>10){const heightDiff=actualHeight-item.height;totalHeightChange+=heightDiff;item.height=actualHeight;heightChanged=true}}));if(heightChanged){const scrollTop=context.container.scrollTop;let currentPosition=0;for(let i=0;i<context.items.length;i++){const item=context.items[i];item.position=currentPosition;currentPosition+=item.height;if(item.element){item.element.style.top=`${item.position}px`}}context.totalHeight=currentPosition;context.content.style.height=`${context.totalHeight}px`;context.subcategoryData.totalVirtualHeight=context.totalHeight;context.container.scrollTop=scrollTop;if(serviceItems.length>0){let totalMeasuredHeight=0;let countMeasured=0;serviceItems.forEach((element=>{const index=parseInt(element.dataset.index,10);const item=context.items[index];if(item&&item.height>10){totalMeasuredHeight+=item.height;countMeasured++}}));if(countMeasured>0){const avgHeight=Math.round(totalMeasuredHeight/countMeasured);if(Math.abs(this.ITEM_HEIGHT-avgHeight)>10){this.ITEM_HEIGHT=avgHeight}}}}context.subcategoryData.heightsMeasured=true;this._updateVisibleItemRange(context);this._renderVisibleItems(context)}_updateActiveItem(context){const containerRect=context.container.getBoundingClientRect();const containerCenter=containerRect.top+containerRect.height/2;let closestItem=null;let closestDistance=Infinity;let closestIndex=-1;for(let i=context.visibleStartIndex;i<=context.visibleEndIndex;i++){const item=context.items[i];if(item.element){const itemRect=item.element.getBoundingClientRect();const itemCenter=itemRect.top+itemRect.height/2;const distance=Math.abs(itemCenter-containerCenter);if(distance<closestDistance){closestDistance=distance;closestItem=item.element;closestIndex=i}}}if(closestItem&&closestIndex!==context.activeItemIndex){context.content.querySelectorAll(".service-item.active").forEach((element=>{element.classList.remove("active")}));closestItem.classList.add("active");context.activeItemIndex=closestIndex}}_loadMoreItems(context){const subcategoryData=context.subcategoryData;const scrollTop=context.container.scrollTop;const containerHeight=context.container.clientHeight;const contentHeight=context.totalHeight;if(scrollTop+containerHeight>contentHeight-500){const originalServices=subcategoryData.originalServices;const newItems=[];const itemsPerPage=20;const startIndex=context.items.length;for(let i=0;i<itemsPerPage;i++){const originalIndex=(startIndex+i)%originalServices.length;const newItem={index:startIndex+i,content:originalServices[originalIndex],height:this.ITEM_HEIGHT,position:context.totalHeight+i*this.ITEM_HEIGHT,element:null};newItems.push(newItem);context.items.push(newItem)}context.totalHeight+=itemsPerPage*this.ITEM_HEIGHT;context.content.style.height=`${context.totalHeight}px`;this._updateVisibleItemRange(context);this._renderVisibleItems(context)}}_initializePagination(){const serviceCards=this.servicesContainer.querySelectorAll(".service-card");serviceCards.forEach(((_,index)=>{const dot=document.createElement("div");dot.classList.add("pagination-dot");dot.setAttribute("data-index",index);this.paginationDotsContainer.appendChild(dot)}));this.paginationDotsContainer.addEventListener("click",(e=>{if(e.target.classList.contains("pagination-dot")){const index=e.target.getAttribute("data-index");this._scrollToCard(index)}}));this.servicesContainer.addEventListener("scroll",this.throttle((()=>{const cards=this.servicesContainer.querySelectorAll(".service-card");let closestCard=null;let closestDistance=Infinity;cards.forEach(((card,index)=>{const cardRect=card.getBoundingClientRect();const containerRect=this.servicesContainer.getBoundingClientRect();const distance=Math.abs(cardRect.left-containerRect.left);if(distance<closestDistance){closestDistance=distance;closestCard=index}}));if(closestCard!==null){this._updateActiveDot(closestCard)}}),100));this._updateActiveDot(0)}_updateActiveDot(index){const dots=this.paginationDotsContainer.querySelectorAll(".pagination-dot");dots.forEach(((dot,i)=>{dot.classList.toggle("active",i===index)}))}_initializeDragAndScroll(){this._updateCurrentCardIndex();this.servicesContainer.addEventListener("mousedown",(e=>{if(e.target.closest(".subcategory")||e.target.closest(".services-display"))return;this.servicesContainer.style.scrollBehavior="auto";this.isDragging=true;this.startX=e.pageX;this.dragDistance=0;this.servicesContainer.style.cursor="grabbing";e.preventDefault()}),{passive:false});document.addEventListener("mousemove",(e=>{if(!this.isDragging)return;this.dragDistance=this.startX-e.pageX;e.preventDefault()}),{passive:false});document.addEventListener("mouseup",(e=>{if(!this.isDragging)return;this.isDragging=false;this.servicesContainer.style.cursor="grab";this.servicesContainer.style.scrollBehavior="smooth";if(Math.abs(this.dragDistance)>this.dragThreshold){const targetIndex=this.dragDistance>0?Math.min(this._getCardCount()-1,this.currentCardIndex+1):Math.max(0,this.currentCardIndex-1);this._scrollToCard(targetIndex)}else{this._scrollToCard(this.currentCardIndex)}e.preventDefault()}),{passive:false});this.servicesContainer.addEventListener("touchstart",(e=>{if(e.target.closest(".subcategory")||e.target.closest(".services-display"))return;this.servicesContainer.style.scrollBehavior="auto";this.isDragging=true;this.startX=e.touches[0].pageX;this.dragDistance=0;e.preventDefault()}),{passive:false});document.addEventListener("touchmove",(e=>{if(!this.isDragging)return;this.dragDistance=this.startX-e.touches[0].pageX;e.preventDefault()}),{passive:false});document.addEventListener("touchend",(e=>{if(!this.isDragging)return;this.isDragging=false;this.servicesContainer.style.scrollBehavior="smooth";if(Math.abs(this.dragDistance)>this.dragThreshold){const targetIndex=this.dragDistance>0?Math.min(this._getCardCount()-1,this.currentCardIndex+1):Math.max(0,this.currentCardIndex-1);this._scrollToCard(targetIndex)}else{this._scrollToCard(this.currentCardIndex)}e.preventDefault()}),{passive:false});this.servicesContainer.addEventListener("scroll",this.throttle((()=>{if(!this.isDragging){this._updateCurrentCardIndex()}}),150),{passive:true})}_getCardCount(){return this.servicesContainer.querySelectorAll(".service-card").length}_updateCurrentCardIndex(){const cards=this.servicesContainer.querySelectorAll(".service-card");let closestCard=0;let closestDistance=Infinity;const containerRect=this.servicesContainer.getBoundingClientRect();const containerCenter=containerRect.left+containerRect.width/2;cards.forEach(((card,index)=>{const cardRect=card.getBoundingClientRect();const cardCenter=cardRect.left+cardRect.width/2;const distance=Math.abs(cardCenter-containerCenter);if(distance<closestDistance){closestDistance=distance;closestCard=index}}));if(closestCard!==this.currentCardIndex){this.currentCardIndex=closestCard;if(this.paginationDotsContainer){this._updateActiveDot(closestCard)}}return closestCard}_scrollToCard(index){const card=this.servicesContainer.querySelector(`.service-card:nth-child(${parseInt(index)+1})`);if(card){const containerWidth=this.servicesContainer.offsetWidth;const cardWidth=card.offsetWidth;const cardLeft=card.offsetLeft;const scrollPosition=cardLeft-(containerWidth-cardWidth)/2;this.servicesContainer.scrollTo({left:scrollPosition,behavior:"smooth"});if(this.paginationDotsContainer){this._updateActiveDot(index)}this.currentCardIndex=parseInt(index)}}}export{popuMe,popuSwiper,popuTimeline,popuEdu,popuServ};