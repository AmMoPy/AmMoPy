function darkMode(){const darkModeToggle=document.getElementById("dark-mode-toggle");darkModeToggle.addEventListener("click",(()=>{const root=document.documentElement;root.classList.toggle("dark-mode");const isDarkMode=root.classList.contains("dark-mode");localStorage.setItem("dark-mode",isDarkMode)}))}function secAnim(){const sections=document.querySelectorAll(".section");const observer=new IntersectionObserver((entries=>{entries.forEach((entry=>{if(entry.isIntersecting){entry.target.classList.add("visible")}else{entry.target.classList.remove("visible")}}))}),{threshold:.1});sections.forEach((section=>{observer.observe(section)}))}function updatePbar(){const progressBar=document.getElementById("progress-bar");const windowHeight=window.innerHeight;const documentHeight=document.documentElement.scrollHeight;const scrollTop=window.scrollY||document.documentElement.scrollTop;const scrollProgress=scrollTop/(documentHeight-windowHeight)*100;progressBar.style.width=scrollProgress+"%";if(scrollProgress<50){progressBar.style.backgroundColor="#00ff88"}else if(scrollProgress<75){progressBar.style.backgroundColor="#ffc107"}else{progressBar.style.backgroundColor="#dc3545"}}class LazyLoader{constructor(options={}){this.defaultThreshold=options.threshold||.1;this.defaultRootMargin=options.rootMargin||"200px";this.sections=new Map;this.observer=null;this.debounceTimeout=null;this.navigationHandler=options.navigationHandler||null}_initObserver(){this.observer=new IntersectionObserver((entries=>{if(this.debounceTimeout){clearTimeout(this.debounceTimeout)}this.debounceTimeout=setTimeout((()=>{entries.forEach((entry=>{const{target:target,isIntersecting:isIntersecting}=entry;if(isIntersecting){const sectionId=target.id;console.log(`Loading section "${sectionId}"...`);const populateCallback=this.sections.get(sectionId);if(populateCallback){try{populateCallback()}catch(error){console.error(`Error populating section "${sectionId}":`,error)}}this.observer.unobserve(target);this.sections.delete(sectionId)}}))}),100)}),{rootMargin:this.defaultRootMargin,threshold:this.defaultThreshold})}addSection(sectionId,populateCallback,options={}){const section=document.getElementById(sectionId);if(!section){console.error(`Section with ID "${sectionId}" not found.`);return}this.sections.set(sectionId,populateCallback);if(!this.observer){this._initObserver()}this.observer.observe(section);const boundingBox=section.getBoundingClientRect();if(boundingBox.top<window.innerHeight&&boundingBox.bottom>=0){console.log(`Section "${sectionId}" is already in the viewport. Populating immediately...`);populateCallback();this.observer.unobserve(section);this.sections.delete(sectionId)}if(this.navigationHandler){this.sections.set(sectionId,(()=>{populateCallback();this.navigationHandler._updateActiveSection(sectionId)}))}else{this.sections.set(sectionId,populateCallback)}}loadSection(sectionId,callback){const populateCallback=this.sections.get(sectionId);if(populateCallback){try{populateCallback();if(callback)callback()}catch(error){console.error(`Error loading section "${sectionId}":`,error)}this.observer?.unobserve(document.getElementById(sectionId));this.sections.delete(sectionId)}}}class navMgr{constructor(lazyLoader,options={}){this.lazyLoader=lazyLoader;this.menuOpen=false;this.currentActiveSection=null;this.menuToggle=document.getElementById("menu-toggle");this.mainNav=document.getElementById("main-nav");this.navLinks=document.querySelectorAll("#main-nav a.smoothscroll");this._initMenu();this._initScrollTracking();this._initModal()}_initMenu(){this.menuToggle.addEventListener("click",(()=>this._toggleMenu()));this.navLinks.forEach((link=>{link.addEventListener("click",(e=>this._handleNavClick(e)))}))}_toggleMenu(){this.menuOpen=!this.menuOpen;this.menuToggle.classList.toggle("active",this.menuOpen);this.mainNav.classList.toggle("visible",this.menuOpen)}_handleNavClick(e){e.preventDefault();const targetId=e.currentTarget.getAttribute("href");if(this.menuOpen)this._toggleMenu();this._navigateToSection(targetId)}_navigateToSection(targetId){const sectionId=targetId.substring(1);const targetSection=document.querySelector(targetId);if(!targetSection){console.error(`Section ${targetId} not found`);return}if(this.lazyLoader.sections.has(sectionId)){this.lazyLoader.loadSection(sectionId,(()=>{this._scrollToSection(targetId)}))}else{this._scrollToSection(targetId)}}_scrollToSection(targetId){const targetSection=document.querySelector(targetId);if(targetSection){targetSection.scrollIntoView({behavior:"smooth",block:"start"});setTimeout((()=>{this._updateActiveSection(targetId.substring(1))}),1e3)}}_initScrollTracking(){let isScrolling;window.addEventListener("scroll",(()=>{window.cancelAnimationFrame(isScrolling);isScrolling=window.requestAnimationFrame((()=>{this._updateActiveSection()}))}),{passive:true})}_updateActiveSection(forcedSectionId=null){const sections=document.querySelectorAll("section[id]");let newActiveSection=forcedSectionId;if(!forcedSectionId){sections.forEach((section=>{const rect=section.getBoundingClientRect();if(rect.top<=100&&rect.bottom>=100){newActiveSection=section.id}}))}if(newActiveSection&&newActiveSection!==this.currentActiveSection){this.currentActiveSection=newActiveSection;this.navLinks.forEach((link=>{link.classList.toggle("active",link.getAttribute("href")===`#${newActiveSection}`)}))}}_initModal(){document.querySelectorAll('#main-nav a[href="#contact-link"]').forEach((link=>{link.addEventListener("click",(e=>{e.preventDefault();document.getElementById("contact-link").click()}))}))}}export{darkMode,secAnim,updatePbar,LazyLoader,navMgr};